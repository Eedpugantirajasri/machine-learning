{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMqA1dNSndpmlUtsaD2Qjtn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jW9A4m7trKet","executionInfo":{"status":"ok","timestamp":1738405912536,"user_tz":-330,"elapsed":904,"user":{"displayName":"rajasri eedpuganti","userId":"07407753091693883990"}},"outputId":"4f5c1c1a-fc1d-4c23-cb7f-2be95fa279ff"},"outputs":[{"output_type":"stream","name":"stdout","text":["    Outlook  Temp Humidity    Wind Play\n","0     Sunny   Hot     High    Weak   No\n","1     Sunny   Hot     High  Strong   No\n","2  Overcast   Hot     High    Weak  Yes\n","3      Rain  Mild     High    Weak  Yes\n","4      Rain  Cool   Normal    Weak  Yes\n","Decision Tree:\n","{'Outlook': {'Sunny': {'Humidity': {'High': 'No', 'Normal': 'Yes'}}, 'Overcast': 'Yes', 'Rain': {'Wind': {'Weak': 'Yes', 'Strong': 'No'}}}}\n"]}],"source":["#import libraries\n","import pandas as pd\n","import math\n","# Function to calculate the entropy of a dataset\n","def entropy(data, target):\n","    class_counts = data[target].value_counts()\n","    total_instances = len(data)\n","    entropy_val = 0\n","    for count in class_counts:\n","        prob = count / total_instances\n","        entropy_val -= prob * math.log2(prob)\n","    return entropy_val\n","# Function to calculate information gain for a feature\n","def information_gain(data, feature, target):\n","    total_entropy = entropy(data, target)\n","    feature_values = data[feature].unique()\n","    weighted_entropy = 0\n","    for value in feature_values:\n","        subset = data[data[feature] == value]\n","        subset_entropy = entropy(subset, target)\n","        weighted_entropy += (len(subset) / len(data)) * subset_entropy\n","    return total_entropy - weighted_entropy\n","# Function to build the ID3 decision tree\n","def id3(data, features, target):\n","    if len(data[target].unique()) == 1:\n","        return data[target].iloc[0]\n","    if not features:\n","        return data[target].mode()[0]\n","    best_feature = max(features, key=lambda feature: information_gain(data, feature, target))\n","    tree = {best_feature: {}}\n","    for value in data[best_feature].unique():\n","        subset = data[data[best_feature] == value]\n","        subset_features = [f for f in features if f != best_feature]\n","        tree[best_feature][value] = id3(subset, subset_features, target)\n","    return tree\n","# Load dataset from CSV\n","df = pd.read_csv(\"/content/Tennis.csv\")\n","# Check the first few rows to verify the dataset structure\n","print(df.head())\n","# List of features (excluding the target column 'Play')\n","features = ['Outlook', 'Temp', 'Humidity', 'Wind']\n","target = 'Play'\n","# Build the decision tree\n","tree = id3(df, features, target)\n","# Print the resulting decision tree\n","print(\"Decision Tree:\")\n","print(tree)"]}]}